from erd import *
from table import *

# This function converts an ERD object into a Database object
# The Database object should correspond to a fully correct implementation
# of the ERD, including both data structure and constraints, such that the
# CREATE TABLE statements generated by the Database object will populate an
# empty MySQL database to exactly implement the conceptual design communicated
# by the ERD.
#
# @TODO: Implement me!
def convert_to_table( erd ):
    entityTable = []
    relationTable = []
    returnTable = []
    name = ""
    att = []
    pk = []
    fk = []
    toRemove = []
    relation = []

    
    
    for member in erd.entity_sets:
        name = member.name
        for eachAtt in member.attributes:
            att.append(eachAtt)
        for eachPK in member.primary_key:
            pk.append(eachPK)
            
        aTable = Table(name, set(att), set(pk), set(fk))
        entityTable.append(aTable)
        att = []
        pk = []
        fk = []
        
    
    for relationship in erd.relationships:
        name = relationship.name
        for eachAtt in relationship.attributes:
            att.append(eachAtt)
        for eachPK in relationship.primary_key:
            pk.append(eachPK)
            
        aTable = Table(name, set(att), set(pk), set(fk))
        relationTable.append(aTable)
        att = []
        pk = []
        fk = []
        
    
    #check connection
    fkRef = []
    for member1 in erd.entity_sets:
        if (len(member1.connections) != 0):
            for connect1 in member1.connections:
                es1 = member1
                conName1, multi1 = connect1
                for member2 in erd.entity_sets:
                    if (len(member2.connections) > 0 and member1.name != member2.name):
                        for connect2 in member2.connections:
                            es2 = member2
                            conName2, multi2 = connect2
                            # one-one relationship
                            if (multi1 == multi2 and conName1 == conName2 and multi1 == Multiplicity.ONE):
                                None
                            # many-many relationship
                            elif (multi1 == multi2 and conName1 == conName2 and multi1 == Multiplicity.MANY):
                                for rela in relationTable:
                                    if (rela.name == conName2):
                                        for primKey in es1.primary_key:
                                            if (primKey not in rela.attributes):
                                                rela.attributes.add(primKey)
                                                rela.primary_key.add(primKey)
                                                fkRef.append(primKey)
                                        if (len(fkRef) > 0):
                                            rela.foreign_keys.add((tuple(fkRef), es1.name, tuple(fkRef)))
                                        fkRef = []
                                        for primKey in es2.primary_key:
                                            if (primKey not in rela.attributes):
                                                rela.attributes.add(primKey)
                                                rela.primary_key.add(primKey)
                                                fkRef.append(primKey)
                                        if (len(fkRef) > 0):
                                            rela.foreign_keys.add((tuple(fkRef), es2.name, tuple(fkRef)))
                                        fkRef = []
                                        
                            #many-one relationship            
                            elif (multi1 != multi2 and conName1 == conName2):
                                for rela in relationTable:
                                    if(len(rela.attributes) > 0 and len(rela.primary_key) > 0 and rela.name == conName1):
                                        for key in es1.primary_key:
                                            if(key not in rela.attributes):
                                                rela.attributes.add(key)
                                                fkRef.append(key)
                                                if (multi1 == Multiplicity.MANY):
                                                    rela.primary_key.add(key)
                                            if (len(fkRef) > 0):
                                                rela.foreign_keys.add((tuple(fkRef), es1.name, tuple(fkRef)))
                                            fkRef = []
                                        for key in es2.primary_key:
                                            if(key not in rela.attributes):
                                                rela.attributes.add(key)
                                                fkRef.append(key)
                                                if (multi2 == Multiplicity.MANY):
                                                    rela.primary_key.add(key)
                                            if (len(fkRef) > 0):
                                                rela.foreign_keys.add((tuple(fkRef), es2.name, tuple(fkRef)))
                                            fkRef = []
                                        
                                        
                                    elif (multi1 == Multiplicity.ONE and multi2 == Multiplicity.MANY and rela.name == conName1):
                                        toRemove.append(conName1)
                                        for entity1 in erd.entity_sets:
                                            if (es1.name == entity1.name):
                                                for entity2 in entityTable:
                                                    if (es1.name == entity1.name and entity1.name != entity2.name):
                                                        entity2.attributes |= set(entity1.primary_key)
                                                        # print(entity2.name)
                                                        # print(entity2.attributes)
                                                        for key in entity1.primary_key:
                                                            if (key not in entity2.foreign_keys):
                                                                fkRef.append(key)
                                                        if (len(fkRef) > 0):
                                                            entity2.foreign_keys.add((tuple(fkRef), es1.name, tuple(fkRef)))
                                                        fkRef = []
                                                        entity2.attributes |= rela.attributes #TODO
                                                        
                                                            
                                    elif (multi2 == Multiplicity.ONE and multi1 == Multiplicity.MANY and rela.name == conName1):
                                        toRemove.append(conName2)
                                        for entity2 in erd.entity_sets:
                                            if (es2.name == entity2.name):
                                                for entity1 in entityTable:
                                                    if (es1.name == entity1.name and entity1.name != entity2.name):
                                                        entity1.attributes |= set(entity2.primary_key)
                                                        for key in entity2.primary_key:
                                                            if (key not in entity1.foreign_keys):
                                                                fkRef.append(key)
                                                        if (len(fkRef) > 0):
                                                            entity1.foreign_keys.add((tuple(fkRef), es2.name, tuple(fkRef)))
                                                        fkRef = []
                                                        entity1.attributes |= rela.attributes #TODO
    
    



    # #check for parents
    for es in erd.entity_sets:
        if(len(es.parents) > 0):
            for parent in es.parents:
                for member1 in entityTable:
                    if (member1.name == parent):
                        for child in entityTable:
                            if (child.name == es.name):
                                child.attributes |= member1.primary_key
                                child.primary_key |= member1.primary_key
                                for key in member1.primary_key:
                                    if (key not in child.foreign_keys):
                                        fkRef.append(key)
                                if (len(fkRef) > 0):
                                    child.foreign_keys.add((tuple(fkRef), member1.name, tuple(fkRef)))
                                fkRef = []
                                    
                                    
    # #check weak entity sets
    for es in erd.entity_sets:
        if(len(es.supporting_relations) > 0):
            for toAddTo in entityTable:
                if(toAddTo.name == es.name):
                    for weakRelationship in es.supporting_relations:
                        for toGetFrom in erd.entity_sets:
                            for toGetFrom_Relationship in toGetFrom.connections:
                                relationshipName, multi = toGetFrom_Relationship
                                if(weakRelationship == relationshipName):
                                    toAddTo.attributes |= set(toGetFrom.primary_key)
                                    toAddTo.primary_key |= set(toGetFrom.primary_key)
                                    for key in toGetFrom.primary_key:
                                        if (key not in toAddTo.foreign_keys):
                                            fkRef.append(key)
                                        if (len(fkRef) > 0):
                                            toAddTo.foreign_keys.add((tuple(fkRef), toGetFrom.name, tuple(fkRef)))
                                        fkRef = []
    
    # if relationship is used once                        
    count = 0
    for rel in relationTable:
        for member1 in erd.entity_sets:
            if (len(member1.connections) != 0):
                for con in member1.connections:
                    conName, multi = con
                    if(conName == rel.name):
                        count += 1
        if (count < 2):
            toRemove.append(rel.name)
        count = 0                           
            
    # remove any relationship from relationTable that is also in toRemove
    count = 0
    for relationName in toRemove:
        for relation in relationTable:
            if (relationName == relation.name):
                relationTable.pop(count)
            count += 1
        count = 0
                    
                                
    returnTable.extend(entityTable)
    returnTable.extend(relationTable)     
    
    return Database(returnTable)
